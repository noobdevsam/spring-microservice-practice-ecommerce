services:
    ms-db-mysql-product:
        container_name: ms-db-mysql-product
        image: mysql:latest
        environment:
            MYSQL_ROOT_PASSWORD: password
            MYSQL_DATABASE: productdb
            MYSQL_USER: productadmin
            MYSQL_PASSWORD: password
        volumes:
            - mysql-data-product:/var/lib/mysql
        ports:
            - "3306:3306"
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-db-mysql-order:
        container_name: ms-db-mysql-order
        image: mysql:latest
        environment:
            MYSQL_ROOT_PASSWORD: password
            MYSQL_DATABASE: orderdb
            MYSQL_USER: orderadmin
            MYSQL_PASSWORD: password
        volumes:
            - mysql-data-order:/var/lib/mysql
        ports:
            - "3307:3306"
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-db-mysql-payment:
        container_name: ms-db-mysql-payment
        image: mysql:latest
        environment:
            MYSQL_ROOT_PASSWORD: password
            MYSQL_DATABASE: paymentdb
            MYSQL_USER: paymentadmin
            MYSQL_PASSWORD: password
        volumes:
            - mysql-data-payment:/var/lib/mysql
        ports:
            - "3308:3306"
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-db-mongodb:
        container_name: ms-db-mongodb
        image: mongo:latest
        volumes:
            - mongo-data:/data/db
        ports:
            - "27017:27017"
        networks:
            - microservices-net
        restart: unless-stopped
    
    mail-dev:
        container_name: ms-mail-dev
        image: maildev/maildev:latest
        ports:
            - "2080:1080"
            - "3025:1025"
        volumes:
            - maildev-data:/data
        networks:
            - microservices-net
        restart: unless-stopped
    
    
    ms-kafka:
        container_name: ms-kafka
        image: bitnami/kafka:latest
        ports:
            - "9092:9092"
        volumes:
            - kafka-data:/bitnami/kafka/data
            - kafka-conf:/opt/bitnami/kafka/conf
        environment:
            KAFKA_CFG_PROCESS_ROLES: broker,controller
            KAFKA_CFG_NODE_ID: 1
            KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@ms-kafka:9093
            KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
            KAFKA_CFG_LISTENERS: PLAINTEXT://ms-kafka:9092,CONTROLLER://ms-kafka:9093
            KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092 # Use the advertised listener for your apps to connect
            KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
            KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-zipkin-server:
        container_name: ms-zipkin-server
        image: openzipkin/zipkin:latest
        ports:
            - "9411:9411"
        volumes:
            - zipkin-data:/data
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-keycloak:
        container_name: ms-keycloak
        image: keycloak/keycloak:latest
        ports:
            - "8088:8080"
        environment:
            KEYCLOAK_ADMIN: admin
            KEYCLOAK_ADMIN_PASSWORD: admin
        volumes:
            - keycloak-data:/opt/keycloak/data
        networks:
            - microservices-net
        command:
            - "start-dev"
    
    # Uncomment the following services if you have the respective images built
    # with command : mvn clean package -DskipTests spring-boot:build-image
    
    ms-config-server:
        image: config-server-service:0.0.1-SNAPSHOT
        container_name: ms-config-server
        environment:
            - EUREKA_SERVER_HOST=ms-config-discovery
            - ZIPKIN_HOST=ms-zipkin-server
        networks:
            - microservices-net
        restart: unless-stopped
    
    ms-config-discovery:
        image: config-discovery-service:0.0.1-SNAPSHOT
        container_name: ms-config-discovery
        ports:
            - "7000:8761"
        environment:
            - CONFIG_SERVER_HOST=ms-config-server
            - CONFIG_SERVER_PORT=8086
            - EUREKA_SERVER_HOST=ms-config-discovery
        networks:
            - microservices-net
        depends_on:
            - ms-config-server
        restart: unless-stopped
    
    ms-customer-service:
        image: customer-service:0.0.1-SNAPSHOT
        container_name: ms-customer-service
        environment:
            - MONGODB_HOST_ADDRESS=ms-db-mongodb
            - CONFIG_SERVER_HOST=ms-config-server
            - CONFIG_SERVER_PORT=8086
            - EUREKA_SERVER_HOST=ms-config-discovery
            - ZIPKIN_HOST=ms-zipkin-server
        networks:
            - microservices-net
        depends_on:
            - ms-db-mongodb
            - ms-config-server
            - ms-config-discovery
            - ms-zipkin-server
        restart: unless-stopped
#
#    ms-product-service:
#        image: product-service:0.0.1-SNAPSHOT
#        container_name: ms-product-service
#        environment:
#            PS_HOST_ADDRESS: ms-db-mysql-product
#        networks:
#            - microservices-net
#        depends_on:
#            - ms-config-server
#            - ms-config-discovery
#        restart: unless-stopped
#
#    ms-order-service:
#        image: order-service:0.0.1-SNAPSHOT
#        container_name: ms-order-service
#        environment:
#            - OS_HOST_ADDRESS=ms-db-mysql-order
#            - OS_KAFKA_HOST=ms-kafka
#            - GS_HOST=ms-gateway-service
#        networks:
#            - microservices-net
#        depends_on:
#            - ms-config-server
#            - ms-config-discovery
#        restart: unless-stopped
#
#    ms-payment-service:
#        image: payment-service:0.0.1-SNAPSHOT
#        container_name: ms-payment-service
#        environment:
#            PMS_KAFKA_HOST: ms-kafka
#            PMS_HOST_ADDRESS: ms-db-mysql-payment
#        networks:
#            - microservices-net
#        depends_on:
#            - ms-config-server
#            - ms-config-discovery
#        restart: unless-stopped
#
#    ms-notification-service:
#        image: notification-service:0.0.1-SNAPSHOT
#        container_name: ms-notification-service
#        environment:
#            - MONGODB_HOST_ADDRESS=ms-db-mongodb
#            - NS_KAFKA_HOST=ms-kafka
#            - MAIL_HOST=mail-dev
#            - MAIL_PORT=3025
#        networks:
#            - microservices-net
#        depends_on:
#            - ms-db-mongodb
#            - mail-dev
#            - ms-kafka
#            - ms-config-server
#            - ms-config-discovery
#        restart: unless-stopped
#
#    ms-gateway-service:
#        image: gateway-service:0.0.1-SNAPSHOT
#        container_name: ms-gateway-service
#        ports:
#            - "8080:8080"
#        networks:
#            - microservices-net
#        depends_on:
#            - ms-config-server
#            - ms-config-discovery
#            - ms-customer-service
#            - ms-product-service
#            - ms-order-service
#            - ms-payment-service
#            - ms-notification-service
#        restart: unless-stopped

networks:
    microservices-net:
        driver: bridge
volumes:
    kafka-data:
    kafka-conf:
    mysql-data-product:
    mysql-data-order:
    mysql-data-payment:
    mongo-data:
    maildev-data:
    zipkin-data:
    keycloak-data: